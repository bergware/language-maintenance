#!/usr/bin/php -q
<?PHP
/*
  xl.scan.void - find unused key entries in native language files
  Copyright @2022, Bergware International.
*/

$plugins  = "/usr/local/emhttp/plugins";
$rootdir  = "/boot/unraid/languages";
$native   = glob("$rootdir/lang-en_US/*.txt",GLOB_NOSORT);
$site     = array_filter(glob("$plugins/*",GLOB_ONLYDIR),'webgui');
$pattern  = '/_\((.+?)\)_|_\(["\'](.+?)["\']\)|^Title="(.+?)"$|\$language\[["\'](.+?)["\']\]/m';
$request  = '/\$_SERVER\[["\']REQUEST_URI["\']\] = ["\'](.*?)["\']/';
$folders  = ['include','scripts','nchan','templates'];
$files    = ['DefaultPageLayout.php','.login.php','.set-password.php','myservers1.php','myservers2.php','CreateDocker.php','ContainerManager.php','DockerContainers.php'];
$keys     = ['Days_array','Months_array','Numbers_array','prefix_IEC','prefix_SI'];
$sections = $more = $list = [];

function webgui($path) {
  return in_array(basename($path),['dynamix','dynamix.apcupsd','dynamix.docker.manager','dynamix.plugin.manager','dynamix.my.servers','dynamix.unraid.net','dynamix.vm.manager','dynamix.file.manager']);
}
function head($file) {
  return file_get_contents($file,false,null,0,1024);
}
function add($file, $section, $key) {
  global $sections, $list;
  if (!in_array($file,$sections[$section]) && preg_match('/^Menu="'.$key.'(:\d+)?"/i',head($file))) $sections[$section][] = $list[] = $file;
}
function mark($row) {
  global $keys;
  if (strlen($row)==0 || $row[0]==';' || strpos($row,'=')===false) return '';
  [$key,$val] = explode('=',$row);
  if (in_array($key,$keys)) return '';
  return $val ?: $key;
}
function init(&$array) {
  if (!isset($array)) $array = [];
}
function screen($text,&$array) {
  echo preg_replace(["/( => )?Array\n\s*\(/m","/^\s*\)\n/m","/=> /"],'',$text.print_r($array,true));
}
// create the top sections (tasks)
foreach ($site as $path) {
  foreach (glob("$path/*.page",GLOB_NOSORT) as $file) {
    if (preg_match('/^Menu=".*Tasks(:\d+)?"/i',head($file))) {
      $section = strtolower(basename($file,'.page'));
      init($sections[$section]);
    }
  }
}
// add pages with first level references
foreach ($site as $path) {
  foreach ($sections as $section => $pages) {
    foreach (glob("$path/*.page",GLOB_NOSORT) as $file) add($file, $section, $section);
  }
}
// add pages with second level references
foreach ($site as $path) {
  foreach ($sections as $section => $pages) {
    foreach ($pages as $page) {
      foreach (glob("$path/*.page",GLOB_NOSORT) as $file) add($file, $section, basename($page,'.page'));
    }
  }
}
// add pages with remaining level references
foreach ($site as $path) {
  foreach (glob("$path/*.page",GLOB_NOSORT) as $file) {
    foreach ($sections as $section => $pages) {
      foreach ($pages as $page) add($file, $section, basename($page,'.page'));
    }
  }
}
// list remaining pages and folders
foreach ($site as $path) {
  foreach (glob("$path/*.page",GLOB_NOSORT) as $file) {
    if (!in_array($file,$more) && !in_array($file,$list)) $more[] = $file;
  }
  foreach ($folders as $folder) {
    foreach (glob("$path/$folder/{.[!.],}*",GLOB_NOSORT|GLOB_BRACE) as $file) {
      if (in_array(basename($file),$files)||preg_match($request,head($file),$matches)) {
        $section = strtolower($matches[1]) ?: 'translations';
        init($sections[$section]);
        $sections[$section][] = $list[] = $file;
      }
    }
  }
}
ksort($sections);
// =============================================================================================
// Debug info
//sort($more);
//sort($list);
//screen('Sections',$sections);
//screen('More',$more);
//screen('List',$list);

// =============================================================================================
$data = $void = [];

foreach ($sections as $section => $pages) {
  $text = [];
  foreach ($pages as $page) {
    if (preg_match_all($pattern,file_get_contents($page),$matches)) {
      $text = array_filter(array_merge($text,$matches[1],$matches[2],$matches[3],$matches[4]));
    }
  }
  if (count($text)) {
    natcasesort($text);
    $join = [];
    foreach (explode('/',$section) as $area) {
      init($data[$area]);
      $join = array_merge($join,$data[$area],array_unique($text,SORT_STRING));
    }
    $join = array_values(array_unique($join,SORT_STRING));
    foreach (explode('/',$section) as $area) $data[$area] = $join;
  }
}
foreach ($more as $page) {
  $text = [];
  if (preg_match_all($pattern,file_get_contents($page),$matches)) {
    $text = array_filter(array_merge($text,$matches[1],$matches[2],$matches[3],$matches[4]));
  }
  if (count($text)) $data['translations'] = array_merge($data['translations'],$text);
}
natcasesort($data['translations']);
$data['translations'] = array_values(array_unique($data['translations'],SORT_STRING));

// loop thru native language files
foreach ($native as $file) {
  $section = basename($file,'.txt');
  if ($section=='helptext') continue;
  $mark = array_filter(array_map('mark',file($file,FILE_IGNORE_NEW_LINES)));
  if ($section=='translations') {
    init($void[$section]);
    foreach ($mark as $text) {
      $flag = true;
      foreach ($data as $area) if (in_array($text,$area)) {$flag=false; break;}
      if ($flag) $void[$section][] = $text;
    }
  } else {
    foreach ($mark as $text) {
      if (isset($data[$section]) && !in_array($text,$data[$section]) && !in_array($text,$data['translations'])) {
        init($void[$section]);
        $void[$section][] = $text;
      }
    }
  }
}
screen('',$void);
?>
